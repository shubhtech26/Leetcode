Problem Name : Two Solutions

Solutions 
Brute Force Solution :
Time Complexity :O(N^2)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int[] ans=new int [2];
        int s1,sum;
        for(int j=0;j<nums.length-1;j++)
        {
            s1=nums[j]  ;          
             for(int i=1;i<nums.length;i++)
            {
                sum = s1 + nums[i];
               if(sum==target &&  i!=j)

               {
                ans[0]=j;
                ans[1]=i   ;
                   break;

               } 
            }
        } 
     return ans;
    }
}




Optimal Solution 
Time Complexity :0(n)
class Solution {
        public int[] twoSum(int[] nums, int target) {
         Map<Integer, Integer> map = new HashMap<>();
        int[] res = new int[2];
        for (int i = 0; i < nums.length; i++) {
            if (map.containsKey(nums[i])) {
                res[0] = i;
                res[1] = map.get(nums[i]);
                break;
            }
            map.put(target - nums[i], i);
        }
        return res;    
    }
    
}